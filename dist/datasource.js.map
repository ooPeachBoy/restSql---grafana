{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","console","log","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","when","data","queryStr","target","formatStr","doRequest","encodeURI","method","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","mapToTextValue","_","map","d","i","text","value","isObject","datasourceRequest","filter","scopedVars","refId","hide","Promise","resolve","reject"],"mappings":";;;;;;;;;AAAA;;;;;;;;IAEaA,iB,WAAAA,iB;AAEX,6BAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzDC,YAAQC,GAAR,CAAY,kBAAZ,EAAgCL,gBAAhC;AACA,SAAKM,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,SAAKC,GAAL,GAAWP,iBAAiBO,GAA5B;AACA,SAAKC,IAAL,GAAYR,iBAAiBQ,IAA7B;AACA,SAAKC,CAAL,GAASR,EAAT;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKO,eAAL,GAAuBV,iBAAiBU,eAAxC;AACA,SAAKC,OAAL,GAAe,EAAC,gBAAgB,kBAAjB,EAAf;AACA,QAAI,OAAOX,iBAAiBY,SAAxB,KAAsC,QAAtC,IAAkDZ,iBAAiBY,SAAjB,CAA2BC,MAA3B,GAAoC,CAA1F,EAA6F;AAC3F,WAAKF,OAAL,CAAa,eAAb,IAAgCX,iBAAiBY,SAAjD;AACD;AACF;;;;0BAEKE,O,EAAS;AACbV,cAAQC,GAAR,CAAY,oBAAZ,EAAkCS,OAAlC,EAA0C,SAA1C;AACA,UAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;AACA;AACA;;AAEA,UAAGA,QAAQG,OAAR,CAAgBJ,MAAhB,IAA0B,CAA7B,EAAgC;AAC9B,eAAO,KAAKJ,CAAL,CAAOS,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMC,uBAAqBN,QAAQG,OAAR,CAAgB,CAAhB,EAAmBI,MAA9C;AACA,UAAMC,2BAAyBR,QAAQG,OAAR,CAAgB,CAAhB,EAAmBX,IAAlD;;AAEA,aAAO,KAAKiB,SAAL,CAAe;AACpBhB,aAAKiB,UAAU,KAAKjB,GAAL,gBAAqBa,QAArB,GAAgCE,SAAhC,CAAV,CADe;AAEpB;AACAG,gBAAQ;AAHY,OAAf,CAAP;AAKD;;;qCAEgB;AACf,aAAO,KAAKF,SAAL,CAAe;AACpBhB,aAAK,KAAKA,GAAL,GAAW,GADI;AAEpBkB,gBAAQ;AAFY,OAAf,EAGJC,IAHI,CAGC,oBAAY;AAClB,YAAIC,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,iBAAO,EAAEA,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACD;AACF,OAPM,CAAP;AAQD;;;oCAEehB,O,EAAS;AACvB,UAAIC,QAAQ,KAAKZ,WAAL,CAAiB4B,OAAjB,CAAyBjB,QAAQkB,UAAR,CAAmBjB,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAZ;AACA,UAAIkB,kBAAkB;AACpBC,eAAOpB,QAAQoB,KADK;AAEpBF,oBAAY;AACVxB,gBAAMM,QAAQkB,UAAR,CAAmBxB,IADf;AAEV2B,sBAAYrB,QAAQkB,UAAR,CAAmBG,UAFrB;AAGVC,kBAAQtB,QAAQkB,UAAR,CAAmBI,MAHjB;AAIVC,qBAAWvB,QAAQkB,UAAR,CAAmBK,SAJpB;AAKVtB,iBAAOA;AALG,SAFQ;AASpBuB,kBAAUxB,QAAQwB;AATE,OAAtB;;AAYA,aAAO,KAAKf,SAAL,CAAe;AACpBhB,aAAK,KAAKA,GAAL,GAAW,cADI;AAEpBkB,gBAAQ,MAFY;AAGpBN,cAAMc;AAHc,OAAf,EAIJP,IAJI,CAIC,kBAAU;AAChB,eAAOa,OAAOpB,IAAd;AACD,OANM,CAAP;AAOD;;;oCAEeJ,K,EAAO;AACrBX,cAAQC,GAAR,CAAY,iBAAZ,EAA+BU,KAA/B;AACA,UAAIyB,eAAe;AACfnB,gBAAQ,KAAKlB,WAAL,CAAiB4B,OAAjB,CAAyBhB,KAAzB,EAAgC,IAAhC,EAAsC,OAAtC;AADO,OAAnB;AAGAX,cAAQC,GAAR,CAAY,iBAAZ,EAA+BU,KAA/B;AACA,aAAO,KAAKQ,SAAL,CAAe;AACpBhB,aAAK,KAAKA,GAAL,GAAW,SADI;AAEpBY,cAAMqB,YAFc;AAGpBf,gBAAQ;AAHY,OAAf,EAIJC,IAJI,CAIC,KAAKe,cAJN,CAAP;AAKD;;;mCAEcF,M,EAAQ;AACrB,aAAOG,iBAAEC,GAAF,CAAMJ,OAAOpB,IAAb,EAAmB,UAACyB,CAAD,EAAIC,CAAJ,EAAU;AAClC,YAAID,KAAKA,EAAEE,IAAP,IAAeF,EAAEG,KAArB,EAA4B;AAC1B,iBAAO,EAAED,MAAMF,EAAEE,IAAV,EAAgBC,OAAOH,EAAEG,KAAzB,EAAP;AACD,SAFD,MAEO,IAAIL,iBAAEM,QAAF,CAAWJ,CAAX,CAAJ,EAAmB;AACxB,iBAAO,EAAEE,MAAMF,CAAR,EAAWG,OAAOF,CAAlB,EAAP;AACD;AACD,eAAO,EAAEC,MAAMF,CAAR,EAAWG,OAAOH,CAAlB,EAAP;AACD,OAPM,CAAP;AAQD;;;8BAES9B,O,EAAS;AACjBA,cAAQJ,eAAR,GAA0B,KAAKA,eAA/B;AACAI,cAAQH,OAAR,GAAkB,KAAKA,OAAvB;;AAEA,aAAO,KAAKT,UAAL,CAAgB+C,iBAAhB,CAAkCnC,OAAlC,CAAP;AACD;;;yCAEoBA,O,EAAS;AAAA;;AAC5B;AACAA,cAAQG,OAAR,GAAkByB,iBAAEQ,MAAF,CAASpC,QAAQG,OAAjB,EAA0B,kBAAU;AACpD,eAAOI,OAAOA,MAAP,KAAkB,eAAzB;AACD,OAFiB,CAAlB;;AAIA,UAAIJ,UAAUyB,iBAAEC,GAAF,CAAM7B,QAAQG,OAAd,EAAuB,kBAAU;AAC7C,eAAO;AACLI,kBAAQ,MAAKlB,WAAL,CAAiB4B,OAAjB,CAAyBV,OAAOA,MAAhC,EAAwCP,QAAQqC,UAAhD,EAA4D,OAA5D,CADH;AAELC,iBAAO/B,OAAO+B,KAFT;AAGLC,gBAAMhC,OAAOgC,IAHR;AAIL/C,gBAAMe,OAAOf,IAAP,IAAe;AAJhB,SAAP;AAMD,OAPa,CAAd;;AASAQ,cAAQG,OAAR,GAAkBA,OAAlB;;AAEA,aAAOH,OAAP;AACD;;;+BAEUA,O,EAAS;AAAA;;AAClB,aAAO,IAAIwC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKjC,SAAL,CAAe;AACbhB,eAAK,OAAKA,GAAL,GAAW,WADH;AAEbkB,kBAAQ,MAFK;AAGbN,gBAAML;AAHO,SAAf,EAIGY,IAJH,CAIQ,kBAAU;AAChB,iBAAO6B,QAAQhB,OAAOpB,IAAf,CAAP;AACD,SAND;AAOD,OARM,CAAP;AASD;;;iCAEYL,O,EAAS;AAAA;;AACpB,aAAO,IAAIwC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKjC,SAAL,CAAe;AACbhB,eAAK,OAAKA,GAAL,GAAW,aADH;AAEbkB,kBAAQ,MAFK;AAGbN,gBAAML;AAHO,SAAf,EAIGY,IAJH,CAIQ,kBAAU;AAChB,iBAAO6B,QAAQhB,OAAOpB,IAAf,CAAP;AACD,SAND;AAOD,OARM,CAAP;AASD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    console.log(\"instanceSettings\", instanceSettings);\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    console.log(\"query222333Options\", options,'1234567');\n    var query = this.buildQueryParameters(options);\n    // query.targets = query.targets.filter(t => !t.hide)\n    // console.log(\"query222333Query\", this.url);\n\n    if(options.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    // if (query.targets.length <= 0) {\n    //   return this.q.when({data: []});\n    // }\n\n    // if (this.templateSrv.getAdhocFilters) {\n    //   query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    // } else {\n    //   query.adhocFilters = [];\n    // }\n    // return this.doRequest({\n    //   url: this.url + '/query',\n    //   data: query,\n    //   method: 'POST'\n    // });\n    const queryStr = `?query=${options.targets[0].target}`;\n    const formatStr = `&datatype=${options.targets[0].type}`;\n    \n    return this.doRequest({\n      url: encodeURI(this.url + `/query/${queryStr}${formatStr}`),\n      // url: this.url + '/query/',\n      method: 'GET'\n    })\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    console.log(\"metricFindQuery\", query);\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n    console.log(\"metricFindQuery\", query);\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}